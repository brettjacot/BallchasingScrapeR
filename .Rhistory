setwd("C:/Users/brett/OneDrive/Documents/R/advanced watershed hydro")
RawData <- read_xlsx("coordinatelist.xlsx")
View(RawData)
setwd("C:/Users/brett/OneDrive/Documents/R/advanced watershed hydro")
RawData <- read_xlsx("coordinatelist.xlsx")
View(RawData)
?separate
?separator
?strsplit
RawData <- read_xlsx("coordinatelist.xlsx")
ProperCoords <- strsplit(RawData$coordinates, ", ")
View(ProperCoords)
ProperCoords <- as.data.frame(strsplit(RawData$coordinates, ", "))
RawData <- read_xlsx("coordinatelist.xlsx")
ProperCoords <- flatten(strsplit(RawData$coordinates, ", "))
View(ProperCoords)
RawData <- read_xlsx("coordinatelist.xlsx")
ProperCoords <- matrix(strsplit(RawData$coordinates, ", "))
View(ProperCoords)
ProperCoords <- (strsplit(RawData$coordinates, ", "))
ProperCoords <- df[c("X", "Y")] <- str_split_fixed(RawData$coordinates, ', ', 2)
ProperCoords <- RawData[c("X", "Y")] <- str_split_fixed(RawData$coordinates, ', ', 2)
View(ProperCoords)
ProperCoords[c("X", "Y")] <- str_split_fixed(RawData$coordinates, ', ', 2)
setwd("C:/Users/brett/OneDrive/Documents/R/advanced watershed hydro")
RawData <- read_xlsx("coordinatelist.xlsx")
ProperCoords[c("X", "Y")] <- str_split_fixed(RawData$coordinates, ', ', 2)
View(RawData)
ProperCoords <- str_split_fixed(RawData$coordinates, ', ', 2)
View(ProperCoords)
write_csv(ProperCoords, "coordinatelist.xlsx")
setwd("C:/Users/brett/OneDrive/Documents/R/advanced watershed hydro")
RawData <- read_xlsx("coordinatelist.xlsx")
RawData <- read_xlsx("coordinatelist.xlsx")
ProperCoords <- as.data.frame(str_split_fixed(RawData$coordinates, ', ', 2))
View(ProperCoords)
write_csv(ProperCoords, "coordinatelist.xlsx")
write_csv(ProperCoords, "coordinatelist.csv")
library(dplyr)
library(ggplot2) #setup/package imports
library(tidyverse)
library(readxl)
library(lubridate)
library(zoo)
library(Metrics)
library(gridExtra)
setwd("C:/Users/brett/OneDrive/Documents/R/advanced watershed hydro")
RawData <- read_xlsx("coordinatelist2.xlsx")
ProperCoords <- as.data.frame(str_split_fixed(RawData$coordinates, ', ', 2))
write_csv(ProperCoords, "coordinatelist2.csv")
View(RawData)
ProperCoords <- as.data.frame(str_split_fixed(RawData$check, ', ', 2))
write_csv(ProperCoords, "coordinatelist2.csv")
RawData <- read_xlsx("coordinatelist2.xlsx")
ProperCoords <- as.data.frame(str_split_fixed(RawData$check, ', ', 2))
write_csv(ProperCoords, "coordinatelist3.csv")
?sumifs
?sum
library(httr)
library(jsonlite)
library(dplyr)
library(googlesheets4)
library(tidyr)
library(lubridate)
library(stringr)
library(fmsb)
library(BallchasingScraper)
#Setup + data pulls
gs4_auth(email = "brett.jacot@gmail.com")
apikey = "O6LtEgF40dIUHUrwSrD4p9KSlYPvXPEoolUQHnqQ"
NameLookup <- range_speedread("https://docs.google.com/spreadsheets/d/1TZpW8ob3XSAfgjzKl0YtyMGtSC3HVjFPy_q7ZQUsTiE/edit?gid=0#gid=0", sheet = 1)
OCCBStats_noname <- stats_from_group(group_id = "ontario-campus-carball-winter-20-xxukviq8ww", api_key = apikey)
get_replays_by_criteria <- function(start_date, end_date = format(Sys.time(), "%Y-%m-%dT%H:%M:%SZ"), match_type = NULL, whouploader = NULL, player_id = NULL, api_key, callspersecond = 2) {
url <- "https://ballchasing.com/api/replays"
counter = 1
# Initialize an empty list to store replay IDs
all_replay_ids <- list()
message("Processing request....")
query = list(
`replay-date-after` = start_date,
`replay-date-before` = end_date
)
if (!is.null(match_type)) query$playlist <- match_type
if (!is.null(whouploader)) query$uploader <- whouploader
if (!is.null(player_id)) query$`player-id` <- player_id
query$count <- as.integer(200)
response <- GET(
url,
add_headers(Authorization = api_key),
query = query
)
if (status_code(response) == 200) {
replays <- content(response, as = "parsed", type = "application/json")
if (length(replays$list) > 0) {
replay_ids <- sapply(replays$list, function(x) x$id)
# Append unique replay IDs to the list, avoiding duplicates
all_replay_ids <- (c(all_replay_ids, replay_ids))  # Ensure uniqueness here
while(((length(all_replay_ids)) %% 200) == 0) {
message("More than ", (200 * counter)," replays found, repeating process.")
counter = counter + 1
last_replay_id <- all_replay_ids[length(all_replay_ids)]
url2 <- paste0("https://ballchasing.com/api/replays/", last_replay_id)
response <- GET(url2, add_headers(Authorization = api_key))
if (status_code(response) == 200) {
content_text <- httr::content(response, as = "text")
last_replay_data <- fromJSON(content_text, flatten = TRUE)
}  else {
stop("Failed to retrieve data: ", status_code(response))
}
Sys.sleep(1/callspersecond)
new_end_date <- last_replay_data[["date"]]
has_timezone <- last_replay_data[["date_has_timezone"]]
if (has_timezone) {
# Format: "2025-01-07T22:14:23+01:00"
time_zone <- str_sub(new_end_date, -6)
new_end_date2 <- str_sub(new_end_date, end = -7)
end_posix <- as_datetime(new_end_date2, format = "%Y-%m-%dT%H:%M:%S")
} else {
# Format: "2024-11-17T19:27:33Z"
time_zone <- "Z"
new_end_date2 <- str_sub(new_end_date, end = -2)  # Remove "Z"
end_posix <- as_datetime(new_end_date2, format = "%Y-%m-%dT%H:%M:%S", tz = "UTC")
}
# Subtract 1 second
end_posix <- end_posix - 1
# Format final date
FinalEndDate <- paste0(as.character(end_posix), time_zone)
FinalEndDate <- str_replace(FinalEndDate, " ", "T")
message("Start of new call replay date: ", FinalEndDate)
query = list()
query$`replay-date-after` = start_date
query$`replay-date-before` = FinalEndDate
if (!is.null(match_type)) query$playlist <- match_type
if (!is.null(whouploader)) query$uploader <- whouploader
if (!is.null(player_id)) query$`player-id` <- player_id
query$count <- as.integer(200)
response2 <- GET(
url,
add_headers(Authorization = api_key),
query = query
)
if (status_code(response) == 200) {
replays2 <- content(response2, as = "parsed", type = "application/json")
if (length(replays2$list) > 0) {
replay_ids_new <- sapply(replays2$list, function(x) x$id)
# Append unique replay IDs to the list, avoiding duplicates
all_replay_ids <- (c(all_replay_ids, replay_ids_new))  # Ensure uniqueness here
}
}
}
}
}
else if (status_code(response) == 429) {
stop("Rate limit hit. You've either hit Ballchasing's hourly limit or put in the wrong patron tier into the callspersecond variable.")}
else {
stop("Failed to retrieve replays, status code: ", status_code(response))
}
message("Returned ", length(all_replay_ids), " replay IDs.")
return(unique(all_replay_ids))  # Return unique replay IDs directly
}
get_replay_data <- function(api_key = apikey, replay_id, callspersecond = 2, alldata = FALSE) {
url <- paste0("https://ballchasing.com/api/replays/", replay_id)
response <- GET(url, add_headers(Authorization = api_key))
if (status_code(response) == 200) {
Sys.sleep(1/callspersecond)
content_text <- httr::content(response, as = "text")
replay_data <- fromJSON(content_text, flatten = TRUE)
}
else if (status_code(response) == 429) {
stop("Rate limit hit. You've either hit Ballchasing's hourly limit or put in the wrong patron tier into the callspersecond variable.")}
else {
stop("Failed to retrieve data: ", status_code(response))
}
if (alldata == FALSE) {
if (!is.null(replay_data[["blue"]])){
blue_df <- replay_data[["blue"]][["players"]]
blue_core_stats_cols <- grep("stats.core.", names(blue_df), value = TRUE)
blue_name_stats_cols <- subset(blue_df, select = c(name, id.id, stats.demo.inflicted, stats.demo.taken))
blue_df_sub <- cbind(blue_name_stats_cols, blue_df[, blue_core_stats_cols])
blue_df_sub$team <- "blue"
blue_df_sub$win <- (sum(blue_df_sub[,"stats.core.mvp"]))
}
if (!is.null(replay_data[["orange"]])) {
orange_df <- replay_data[["orange"]][["players"]]
orange_core_stats_cols <- grep("stats.core.", names(orange_df), value = TRUE)
orange_name_stats_cols <- subset(orange_df, select = c(name, id.id, stats.demo.inflicted, stats.demo.taken))
orange_df_sub <- cbind(orange_name_stats_cols, orange_df[, orange_core_stats_cols])
orange_df_sub$team <- "orange"
orange_df_sub$win <- (sum(orange_df_sub[,"stats.core.mvp"]))
}
AllTogether <- rbind(blue_df_sub, orange_df_sub)
AllTogether$match_guid <- replay_data[["match_guid"]]
AllTogether$match_date <- as_datetime(replay_data[["date"]])
AllTogether$BallchasingLink <- paste("https://ballchasing.com/replay/", replay_id, sep = "")
return(AllTogether)
}
if (alldata == TRUE) {
if (!is.null(replay_data[["blue"]])){
blue_df2 <- as.data.frame(replay_data[["blue"]][["players"]])
if (("stats.positioning.goals_against_while_last_defender" %in% colnames(blue_df2)) == FALSE) {
blue_df2$stats.positioning.goals_against_while_last_defender = 0
}
if (("mvp" %in% colnames(blue_df2)) == FALSE) {
blue_df2$mvp = FALSE
}
}
if (!is.null(replay_data[["orange"]])) {
orange_df2 <- as.data.frame(replay_data[["orange"]][["players"]])
if (("stats.positioning.goals_against_while_last_defender" %in% colnames(orange_df2)) == FALSE) {
orange_df2$stats.positioning.goals_against_while_last_defender = 0
}
if (("mvp" %in% colnames(orange_df2)) == FALSE) {
orange_df2$mvp = FALSE
}
}
AllTogether2 <- rbind(blue_df2, orange_df2)
AllTogether2$match_guid <- replay_data[["match_guid"]]
AllTogether2$match_date <- as_datetime(replay_data[["date"]])
AllTogether2$BallchasingLink <- paste("https://ballchasing.com/replay/", replay_id, sep = "")
return(AllTogether2)
}
}
RankedStats <- function(results,  TopPlayerOnly = TRUE, RemoveNextUp = FALSE, rank = "Champion") {
# Step 1: Count games for each player and summarize results
Names <- Find_Player_Names(results)
results <- results %>%
count(id.id, name = "NumGames") %>%
left_join(results, by = "id.id") %>%
group_by(id.id) %>%
summarise(
across(where(is.numeric), mean, na.rm = TRUE),
NumGames = first(NumGames)
) %>%
mutate(NumGames = sqrt(NumGames)) %>%
arrange(desc(NumGames))
# Step 2: Normalize stats columns
results <- results %>%
mutate(
NumGames = NumGames^2
)
results2 <- merge(Names, results, by = "id.id")
results2 <- arrange(results2, desc(NumGames))
results2 <- results2 %>%
rename(
PlayerID = id.id,
PlayerName = most_common_name,
`#Games` = NumGames,
`Demos/G` = stats.demo.inflicted,
`DemosTaken/G` = stats.demo.taken,
`Shots/G` = stats.core.shots,
`ShotsA/G` = stats.core.shots_against,
`Goals/G` = stats.core.goals,
`GoalsA/G` = stats.core.goals_against,
`Saves/G` = stats.core.saves,
`Assists/G` = stats.core.assists,
`Score/G` = stats.core.score,
`Shooting%` = stats.core.shooting_percentage,
`Win%` = win
)
message("RankedStats Process Complete!")
if(TopPlayerOnly == TRUE){
ifelse(RemoveNextUp == TRUE, results_notop <- results2[3:nrow(results2),], results_notop <- results2[2:nrow(results2),])
#Divide all numeric columns by NumGames, then do sum
someDF <- results_notop %>%
mutate(across(where(is.numeric), ~ . / `#Games`, .names = "{.col}")) %>%
summarise(across(where(is.numeric), mean, na.rm = TRUE))
PlayerStats <- head(results2, n = 1)
someDF[["Win%"]] = NA
someDF[["#Games"]] = NA
TotalAverages_2s <- data.frame(matrix(nrow = 8, ncol = 14))
rownames(TotalAverages_2s) = c("Bronze", "Silver", "Gold", "Platinum", "Diamond", "Champion", "GC", "Pros")
colnames(TotalAverages_2s) = colnames(results2)
TotalAverages_2s$`Demos/G` <- c(0.41, 0.42, 0.46, 0.50, 0.57, 0.64, 0.73, 0.81)
TotalAverages_2s$`DemosTaken/G` <- c(0.41, 0.44, 0.49, 0.51, 0.56, 0.63, 0.71, 0.78)
TotalAverages_2s$`Shots/G` <- c(2.11, 2.48, 2.77, 3.01, 3.22, 3.52, 3.85, 4.31)
TotalAverages_2s$`ShotsA/G` <- TotalAverages_2s$`Shots/G` * 2
TotalAverages_2s$`Goals/G` <- c(1.38, 1.48, 1.42, 1.26, 1.13, 1.06, 0.97, 1.33)
TotalAverages_2s$`GoalsA/G` <- TotalAverages_2s$`Goals/G`*2
TotalAverages_2s$`Saves/G` <- c(0.58, 0.77, 0.94, 1.11, 1.29, 1.52, 1.77, 2.01)
TotalAverages_2s$`Assists/G`<- c(0.44, 0.5, 0.55, 0.59, 0.64, 0.69, 0.73, 0.78)
TotalAverages_2s$`Score/G` <- c(314.87, 368.08, 403.65, 428.39, 450.14, 477.54, 507.23, 549.84)
TotalAverages_2s$`Shooting%` <- (TotalAverages_2s$`Goals/G` / TotalAverages_2s$`Shots/G`)*100
RankedAverageRow <- as.data.frame(TotalAverages_2s[rank, , drop = FALSE])
# Combine the data frames
Final <- bind_rows(
PlayerStats,
someDF,
RankedAverageRow
)
Final <- as.data.frame(Final)
rownames(Final) <- c("Player Stats", "Lobby Averages", paste0(rank, " Rank Average (2s)"))
return(Final)
}
if (TopPlayerOnly == FALSE){
return(results2)
}
}
Find_Player_Names <- function(results) {
replace(results$name, is.na(results$name), "(blank name)")
results <- results %>%
group_by(id.id) %>%
reframe(
most_common_name = paste0(names(which.max(table(name)))), # Find the most frequent name for each ID
) %>%
ungroup()
return(results)
}
RunReplays <- function(replay_id_data, api_key, callspersecond = 2, AllData = FALSE){
results <- get_replay_data(api_key, replay_id_data[[1]], alldata = AllData)
TotalReplayCount = length(replay_id_data)
ReplayCount = 1
#Fix the dates in the >200 replays part
while (ReplayCount < TotalReplayCount) {
message("Processing replay ", ReplayCount, " out of ", TotalReplayCount)
ReplayCount <- ReplayCount + 1
replay_results <- get_replay_data(api_key, replay_id_data[[ReplayCount]], callspersecond, alldata = AllData)
results <- rbind(results, replay_results)
}
return(results)
}
# Function to get replay stats by ID
stats_from_group <- function(group_id, api_key, name = FALSE) {
url <- paste0("https://ballchasing.com/api/groups/", group_id)
# API request with query parameters
response <- GET(
url,
add_headers(Authorization = api_key),
query = list(count = 200)  # Request up to 200 replays
)
# Check for request success
if (http_type(response) != "application/json") {
stop(paste0("API request failed. Check the group ID and API key. Error code: ", status_code(response)))
}
# Parse JSON response
content_data <- content(response, as = "text", encoding = "UTF-8")
parsed_data <- fromJSON(content_data, flatten = TRUE)
message("Group data collected!")
datadf <- parsed_data[["players"]]
core_stats_cols <- grep("game_average.core.", names(datadf), value = TRUE)
name_stats <- subset(datadf, select = c(id, cumulative.games, cumulative.wins, cumulative.win_percentage, game_average.demo.taken, game_average.demo.inflicted))
core_stats <- datadf[c(core_stats_cols)]
if (name == TRUE) {
player_names <- subset(datadf, select = name)
core_stats <- cbind(player_names, core_stats)
}
overall_stats <- cbind(name_stats, core_stats)
overall_stats$game_average.core.mvp = NULL
return(overall_stats)
}
AccountCombiner <- function(data, main, alt1, alt2 = NULL, alt3 = NULL) {
# Collect all non-null alt accounts
alts <- Filter(Negate(is.null), list(alt1, alt2, alt3))
# If no alts provided, return original data
if (length(alts) == 0) return(data)
# Get the rows to combine (main + all alts)
fixDF <- data[data$id %in% c(main, alts), ]
# Remove combined accounts from the dataset
data2 <- data[!data$id %in% c(main, alts), ]
# Summarise with weighted and summed stats
combined <- fixDF %>%
summarise(
id = main,
across(starts_with(c("game_average", "cumulative.win_percentage")),
~ weighted.mean(.x, fixDF$cumulative.games, na.rm = TRUE)),
across(c("cumulative.games", "cumulative.wins"), sum, na.rm = TRUE)
)
# Recalculate shooting percentage
combined$game_average.core.shooting_percentage <-
(combined$game_average.core.goals / combined$game_average.core.shots) * 100
# Reattach the new combined account to the rest of the data
final <- rbind(data2, combined)
return(final)
#this works for combining one account but i do want to add multi acc functionality
}
library(httr)
library(jsonlite)
library(dplyr)
library(googlesheets4)
library(tidyr)
library(lubridate)
library(stringr)
library(fmsb)
library(BallchasingScraper)
#Setup + data pulls
gs4_auth(email = "brett.jacot@gmail.com")
apikey = "O6LtEgF40dIUHUrwSrD4p9KSlYPvXPEoolUQHnqQ"
NameLookup <- range_speedread("https://docs.google.com/spreadsheets/d/1TZpW8ob3XSAfgjzKl0YtyMGtSC3HVjFPy_q7ZQUsTiE/edit?gid=0#gid=0", sheet = 1)
OCCBStats_noname <- stats_from_group(group_id = "ontario-campus-carball-winter-20-xxukviq8ww", api_key = apikey)
#Add secondary accounts to players who need it
XcessFix <- OCCBStats_noname[OCCBStats_noname$id %in% c("76561198799216404", "5ecc6af45f7c487d8548535e20977db6"), ]
OCCBStats_noname2 <- OCCBStats_noname %>%
filter(!id %in% c("76561198799216404", "5ecc6af45f7c487d8548535e20977db6"))
XcessFix <- XcessFix %>%
summarise(
id = "5ecc6af45f7c487d8548535e20977db6",  # Use the new ID
across(starts_with(c("game_average", "cumulative.win_percentage")), ~ weighted.mean(.x, XcessFix$cumulative.games, na.rm = TRUE)), # Weighted mean for per-game stats
across(c("cumulative.games", "cumulative.wins"), sum, na.rm = TRUE)  # Sum cumulative stats
)
XcessFix$game_average.core.shooting_percentage <- (XcessFix$game_average.core.goals / XcessFix$game_average.core.shots) * 100
OCCBStats_noname <- rbind(OCCBStats_noname2, XcessFix)
rm(XcessFix)
# Merge with NameLookup
FinalStats <- full_join(NameLookup, OCCBStats_noname, by = "id")
#Renaming data frames
FinalStats <- FinalStats %>%
rename(
PlayerID = id,
`#Games` = cumulative.games,
`#Wins` = cumulative.wins,
`Win%` = cumulative.win_percentage,
`Demos/G` = game_average.demo.inflicted,
`DemosTaken/G` = game_average.demo.taken,
`Shots/G` = game_average.core.shots,
`ShotsA/G` = game_average.core.shots_against,
`Goals/G` = game_average.core.goals,
`GoalsA/G` = game_average.core.goals_against,
`Saves/G` = game_average.core.saves,
`Assists/G` = game_average.core.assists,
`Score/G` = game_average.core.score,
`Shooting%` = game_average.core.shooting_percentage,
)
#Fixing numbers and arranging
FinalStats$`Win%` <- FinalStats$`Win%` / 100
FinalStats$`Shooting%` <- FinalStats$`Shooting%` / 100
FinalStats$mMVPR <- (FinalStats$`Goals/G` + (FinalStats$`Assists/G` * 0.75) + (FinalStats$`Saves/G` * 0.4) + (FinalStats$`Shots/G` * 0.3) + (FinalStats$`Demos/G` * 0.3))
FinalStats <-  arrange(FinalStats, desc(mMVPR))
FinalStats <- na.omit(FinalStats)
#Subsets and exports
PremStats <- subset(FinalStats, League == "Premier")
RegionalStats <- subset(FinalStats, League == "Regional")
LocalStats <- subset(FinalStats, League == "Local")
sheet_write(FinalStats, "https://docs.google.com/spreadsheets/d/1oy0mtWChocOV8YQK6oXG6lmTzjfEoWKBj0nU9aYL350", sheet = 2)
sheet_write(PremStats, "https://docs.google.com/spreadsheets/d/1oy0mtWChocOV8YQK6oXG6lmTzjfEoWKBj0nU9aYL350", sheet = 3)
sheet_write(RegionalStats, "https://docs.google.com/spreadsheets/d/1oy0mtWChocOV8YQK6oXG6lmTzjfEoWKBj0nU9aYL350", sheet = 4)
sheet_write(LocalStats, "https://docs.google.com/spreadsheets/d/1oy0mtWChocOV8YQK6oXG6lmTzjfEoWKBj0nU9aYL350", sheet = 5)
View(OCCBStats_noname)
#Renaming data frames
FinalStats_test <- AccountCombiner(OCCBStats_noname, main = "5ecc6af45f7c487d8548535e20977db6", alt1 = "76561198799216404")
View(FinalStats_test)
#Renaming data frames
FinalStats_test <- AccountCombiner(OCCBStats_noname, main = "5ecc6af45f7c487d8548535e20977db6", alt1 = "76561198799216404")
#Renaming data frames
FinalStats_test <- AccountCombiner(OCCBStats_noname, main = "5ecc6af45f7c487d8548535e20977db6", alt1 = "76561198799216404")
View(OCCBStats_noname)
OCCBStats_noname <- stats_from_group(group_id = "ontario-campus-carball-winter-20-xxukviq8ww", api_key = apikey)
View(OCCBStats_noname)
library(httr)
library(jsonlite)
library(dplyr)
library(googlesheets4)
library(tidyr)
library(lubridate)
library(stringr)
library(fmsb)
library(BallchasingScraper)
#Setup + data pulls
gs4_auth(email = "brett.jacot@gmail.com")
apikey = "O6LtEgF40dIUHUrwSrD4p9KSlYPvXPEoolUQHnqQ"
NameLookup <- range_speedread("https://docs.google.com/spreadsheets/d/1TZpW8ob3XSAfgjzKl0YtyMGtSC3HVjFPy_q7ZQUsTiE/edit?gid=0#gid=0", sheet = 1)
OCCBStats_noname <- stats_from_group(group_id = "ontario-campus-carball-winter-20-xxukviq8ww", api_key = apikey)
#Add secondary accounts to players who need it
XcessFix <- OCCBStats_noname[OCCBStats_noname$id %in% c("76561198799216404", "5ecc6af45f7c487d8548535e20977db6"), ]
OCCBStats_noname2 <- OCCBStats_noname %>%
filter(!id %in% c("76561198799216404", "5ecc6af45f7c487d8548535e20977db6"))
XcessFix <- XcessFix %>%
summarise(
id = "5ecc6af45f7c487d8548535e20977db6",  # Use the new ID
across(starts_with(c("game_average", "cumulative.win_percentage")), ~ weighted.mean(.x, XcessFix$cumulative.games, na.rm = TRUE)), # Weighted mean for per-game stats
across(c("cumulative.games", "cumulative.wins"), sum, na.rm = TRUE)  # Sum cumulative stats
)
XcessFix$game_average.core.shooting_percentage <- (XcessFix$game_average.core.goals / XcessFix$game_average.core.shots) * 100
OCCBStats_noname <- rbind(OCCBStats_noname2, XcessFix)
rm(XcessFix)
# Merge with NameLookup
FinalStats <- full_join(NameLookup, OCCBStats_noname, by = "id")
#Renaming data frames
FinalStats_test <- AccountCombiner(OCCBStats_noname, main = "5ecc6af45f7c487d8548535e20977db6", alt1 = "76561198799216404")
FinalStats <- FinalStats %>%
rename(
PlayerID = id,
`#Games` = cumulative.games,
`#Wins` = cumulative.wins,
`Win%` = cumulative.win_percentage,
`Demos/G` = game_average.demo.inflicted,
`DemosTaken/G` = game_average.demo.taken,
`Shots/G` = game_average.core.shots,
`ShotsA/G` = game_average.core.shots_against,
`Goals/G` = game_average.core.goals,
`GoalsA/G` = game_average.core.goals_against,
`Saves/G` = game_average.core.saves,
`Assists/G` = game_average.core.assists,
`Score/G` = game_average.core.score,
`Shooting%` = game_average.core.shooting_percentage,
)
#Fixing numbers and arranging
FinalStats$`Win%` <- FinalStats$`Win%` / 100
FinalStats$`Shooting%` <- FinalStats$`Shooting%` / 100
FinalStats$mMVPR <- (FinalStats$`Goals/G` + (FinalStats$`Assists/G` * 0.75) + (FinalStats$`Saves/G` * 0.4) + (FinalStats$`Shots/G` * 0.3) + (FinalStats$`Demos/G` * 0.3))
FinalStats <-  arrange(FinalStats, desc(mMVPR))
FinalStats <- na.omit(FinalStats)
#Subsets and exports
PremStats <- subset(FinalStats, League == "Premier")
RegionalStats <- subset(FinalStats, League == "Regional")
LocalStats <- subset(FinalStats, League == "Local")
sheet_write(FinalStats, "https://docs.google.com/spreadsheets/d/1oy0mtWChocOV8YQK6oXG6lmTzjfEoWKBj0nU9aYL350", sheet = 2)
sheet_write(PremStats, "https://docs.google.com/spreadsheets/d/1oy0mtWChocOV8YQK6oXG6lmTzjfEoWKBj0nU9aYL350", sheet = 3)
sheet_write(RegionalStats, "https://docs.google.com/spreadsheets/d/1oy0mtWChocOV8YQK6oXG6lmTzjfEoWKBj0nU9aYL350", sheet = 4)
sheet_write(LocalStats, "https://docs.google.com/spreadsheets/d/1oy0mtWChocOV8YQK6oXG6lmTzjfEoWKBj0nU9aYL350", sheet = 5)
comparedf(OCCBStats_noname, FinalStats_test)
library(arsenal)
?comparedf
comparedf(FinalStats_test, OCCBStats_noname)
